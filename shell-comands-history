# Para Iniciar um projeto no GitHub

*** Criar o projeto no site GitHub
cd <sua pasta raiz de projetos>
git clone https://github.com/IvanBrasilico/raspa-preco.git raspapreco


# Criar estrutura python padrão

mkdir raspa-preco/raspa-preco
cd raspa-preco
mkdir tests
mkdir models
mkdir locale

# Aproveitar a configuração de outros projetos 
cd (...) # ir ao diretório mais conveniente para copiar do projeto anterior
cp ext/binput/setup.py raspa-preco/
cp ext/binput/travis.yml raspa-preco/.travis.yml
cp ext/binput/tox.ini raspa-preco/
cp ext/binput/pylintrc raspa-preco/
cp ext/binput/pytest.ini raspa-preco/
cp ext/binput/generatepot.sh raspa-preco/
cp /ext/binput/.gitignore .
ls -la
git status
git add -A
git status
git commit -m "preparo do ambiente de testes e do git"
git push

** Fazer mudanças necessárias nos arquivos setup.ini, tox.ini, generatepot.sh 

# Criar ambiente virtual para não bagunçar o sistema

python -m virtualenv venv
. venv/bin/activate
pip install pytest tox codecov flake8 flake8-quotes sphinx

# Para guardar e atualizar as dependências

pip freeze >> requirements.txt
history >> shell-comands-history

## Se o repositório já existir...
# Install 
git clone https://github.com/IvanBrasilico/raspa-preco.git raspapreco
cd raspapreco
python -m virtualenv venv
. venv/bin/activate
pip install -r requirements.txt
pip install -e . # IMPORTANTE para setar . como PYTHONPATH

## Não esquecer de ir ao Travis e Codecovadicionar o repositório e pegar o badge para o README após ter alguns testes rodando



ln -s raspapreco/site/static raspapreco/static # Para a versão debug achar os static files

# Para servir a parte estática, colocar as seguintes linhas
# no arquivo nginx/sites-enabled e colocar o conteúdo de sites em 
# /var/ww/html:

location ~ ^/api.* {
    proxy_pass http://127.0.0.1:5000;

}

# Configuração do Sphinx (documentação)
São dois arquivos, conf.py e index.rst. Olhar exemplo neste projeto.
Inicia com sphinx-quickstart
Aí é só colocar o nome dos módulos assim no arquivo .rst:
.. automodule:: raspapreco.utils.site_scraper
    :members:

# Configuração do Celery
sudo apt install rabbitmq-server
pip install Celery
ver arquivo celery.sh

# Configurar alembic
pip install alembic
alembic init alembic
## Configurar Banco de Dados em alembic/env.py
# A cada mudança, rodar os comandos:
alembic revision --autogenerate -m "Descrever a mudança"
alembic upgrade head
